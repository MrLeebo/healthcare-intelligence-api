=begin
#Payer Analytics - Healthcare Intelligence API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module SmrfClient
  class RatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns rates
    # @param rates_request [RatesRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_encoding 
    # @return [Array<RatesResponse>]
    def rates_post(rates_request, opts = {})
      data, _status_code, _headers = rates_post_with_http_info(rates_request, opts)
      data
    end

    # Returns rates
    # @param rates_request [RatesRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_encoding 
    # @return [Array<(Array<RatesResponse>, Integer, Hash)>] Array<RatesResponse> data, response status code and response headers
    def rates_post_with_http_info(rates_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.rates_post ...'
      end
      # verify the required parameter 'rates_request' is set
      if @api_client.config.client_side_validation && rates_request.nil?
        fail ArgumentError, "Missing the required parameter 'rates_request' when calling RatesApi.rates_post"
      end
      allowable_values = ["gzip", "zstd", "lz4"]
      if @api_client.config.client_side_validation && opts[:'accept_encoding'] && !allowable_values.include?(opts[:'accept_encoding'])
        fail ArgumentError, "invalid value for \"accept_encoding\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/rates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/jsonl', 'application/parquet', 'application/arrow'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Accept-Encoding'] = opts[:'accept_encoding'] if !opts[:'accept_encoding'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rates_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RatesResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RatesApi.rates_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#rates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns unique values for a field or combination of fields, applying filters if they exist
    # @param rates_unique_values_post_request [RatesUniqueValuesPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RatesUniqueValuesPost200Response]
    def rates_unique_values_post(rates_unique_values_post_request, opts = {})
      data, _status_code, _headers = rates_unique_values_post_with_http_info(rates_unique_values_post_request, opts)
      data
    end

    # Returns unique values for a field or combination of fields, applying filters if they exist
    # @param rates_unique_values_post_request [RatesUniqueValuesPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RatesUniqueValuesPost200Response, Integer, Hash)>] RatesUniqueValuesPost200Response data, response status code and response headers
    def rates_unique_values_post_with_http_info(rates_unique_values_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesApi.rates_unique_values_post ...'
      end
      # verify the required parameter 'rates_unique_values_post_request' is set
      if @api_client.config.client_side_validation && rates_unique_values_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'rates_unique_values_post_request' when calling RatesApi.rates_unique_values_post"
      end
      # resource path
      local_var_path = '/rates/unique_values'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rates_unique_values_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RatesUniqueValuesPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RatesApi.rates_unique_values_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesApi#rates_unique_values_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
